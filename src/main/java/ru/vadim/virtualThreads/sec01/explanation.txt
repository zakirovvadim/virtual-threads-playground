1. **Виртуальные потоки в Java**:
    - Виртуальные потоки (Virtual Threads) — это иллюзия, созданная Java, которая позволяет создавать миллионы потоков.
    - Они выглядят и ведут себя как обычные потоки (обычные методы, такие как `Thread.sleep()`, работают), но не представляют поток ОС.
    - ОС не видит виртуальные потоки и не может их планировать. Это основной принцип работы.

2. **Отличие от потоков платформы**:
    - Потоки платформы (Platform Threads) напрямую управляются ОС.
    - ОС ограничивает количество потоков платформы из-за потребления системных ресурсов (особенно памяти под стек).
    - Виртуальные потоки легковесны, являются объектами в куче и не требуют создания потоков на уровне ОС.

3. **Как работают виртуальные потоки**:
    - Основой выполнения виртуальных потоков является **ForkJoinPool**.
    - Количество потоков в ForkJoinPool соответствует количеству доступных процессоров.
    - Виртуальные потоки монтируются (привязываются) и исполняются на потоках платформы из ForkJoinPool.

4. **Принцип работы виртуальных потоков**:
    - Виртуальные потоки представляют собой задачи.
    - Потоки платформы выбирают задачи из внутренней очереди и выполняют их.
    - Когда виртуальный поток блокируется (например, при `Thread.sleep()` или сетевом вызове):
        - Задача "паркуется" (откладывается в сторону).
        - Поток платформы освобождается для выполнения других задач.

    - После завершения блокировки задача снимается с парковки и продолжает выполняться.

5. **Поддержка Java обеспечения "иллюзии" потоков**:
    - При монтировании виртуального потока на поток платформы его информация (имя, состояние и т.д.) подменяется.
    - Методы, такие как `Thread.currentThread().getName()`, возвращают данные виртуального потока, а не потока платформы.
    - Например, реализация `Thread.sleep()`:
        - Для потока платформы: используется системный вызов ОС, который блокирует поток на заданное время.
        - Для виртуального потока: задача "паркуется", и дальнейшее выполнение откладывается.

6. **Виртуальный поток и стек**:
    - Потоки обычно используют стек для выполнения. Однако виртуальные потоки требуют использования небольших структур в куче.
    - Как именно работает стек виртуальных потоков, будет рассмотрено в следующих лекциях.

### Итог:
- Виртуальные потоки предоставляют эффективный способ выполнения большого количества задач без высокой нагрузки на ОС.
- Это достигается за счет монтажа задач на потоки платформы и использования внутренних механизмов Java для управления состоянием потоков.
- Это масштабируемое решение для приложений, требующих параллелизма.
