### Thread Local
- Thread Local — это механизм для хранения данных, привязанных к конкретному потоку в Java.
- Представляет собой карту (map), где:
    - Ключ — объект потока.
    - Значение — информация, связанная с потоком.

- Существует в Java уже 20 лет.
- Хорошо работает с виртуальными потоками.
- Имеет недостатки в дизайне и часто неправильно используется.
- Разработчики Java намеренно ограничивают использование Thread Local в JDK.

### Scoped Values
- Scoped Values — это потенциальная замена Thread Local.
- Позволяют безопасно и эффективно сохранять и передавать данные между потоками.
- Однако Scoped Values не поддерживают автоматическое наследование значений дочерними потоками.
- Для решения этой проблемы используется Structured Concurrency.

### Structured Concurrency
- Концепция структурированной конкурентности.
- Представлена в пакете `java.util.concurrent`.
- Предоставляет класс `StructuredTaskScope`, который позволяет работать с группой задач в разных потоках как с одним юнитом работы.
- Автоматически передает Scoped Values текущего потока дочерним потокам.

### Варианты использования StructuredTaskScope:
1. **Базовый сценарий (успех или неудача):**
    - Основная задача разбивается на подзадачи.
    - Эти подзадачи исполняются через `StructuredTaskScope`.
    - Ожидается завершение всех подзадач (успешно или с ошибкой).

2. **Сценарий `ShutdownOnFailure`:**
    - В случае сбоя одной из подзадач:
        - Выполнение всех остальных подзадач немедленно прекращается (отмена).

    - Пример: отменить работу всех карт, если одна из них провалилась.

3. **Сценарий `ShutdownOnSuccess`:**
    - Завершение работы после получения первого успешного результата.
    - Пример: сценарий Uber, когда требуется выбрать первого доступного водителя.

### Примечания
- Scoped Values и Structured Concurrency находятся в стадии предварительной реализации (preview).
- Ожидаются доработки в финальной версии.
- При окончательной реализации возможно добавление более удобных примеров.
